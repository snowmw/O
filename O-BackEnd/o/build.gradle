/*
 * 添加JAVA插件，用于打包等行为
 */
apply plugin: 'java'

/*
 * 将项目构建为IDEA项目
 */
apply plugin: 'idea'

/*
 * 声明版本号
 */
version = '1.0'
/*
 * 添加MAVEN中心仓库地址
 */
repositories {
    mavenCentral()
}
/*
 *  Kotlin 自动构建
 */
buildscript {
	ext {
		kotlinVersion = '1.2.51'
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
    /*
     * 添加Kotlin依赖包
     */
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'x.o'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

/*
 * 添加项目依赖包
 */
dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}
/*
 * 定义一个someString用来存放依赖包的信息，通过configurations.runtime拿到所有的运行时的依赖jar包，然后.each遍历他，通过it.name获取到每个的jar包的name后赋值
 */
jar {
    String someString = ''
    configurations.runtime.each {someString = someString + " lib\\"+it.name} //遍历项目的所有依赖的jar包赋值给变量someString
    manifest {
        attributes 'Main-Class': 'com.each.dubboMainEnd'
        attributes 'Class-Path': someString
    }
}

/*
 * 将依赖的jar复制到对应的目录下
 */
task copyJar(type:Copy){
    from configurations.runtime
    into ('build/libs/lib')
}

/*
 * 打包的时执行函数，dependsOn[build,copyJar]这里会让执行 release 函数的时候先执行build（系统自带的函数） 和copyJar
 * 打包方式：进入项目目录，执行命令 gradle release
 */
task release(type: Copy,dependsOn: [build,copyJar]) {
    from  'conf'
    into ('build/libs/eachend/conf') // 目标位置
}